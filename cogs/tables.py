import disnake
from disnake.ext import commands
from googleapiclient.discovery import build
from google.oauth2 import service_account
from config import SPREADSHEET_ID
from datetime import datetime
import asyncio
import googleapiclient

SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SERVICE_ACCOUNT_FILE = './credentials/cc-5052-bly-e24abd47118d.json'

class NewSoldierModal(disnake.ui.Modal):
    def __init__(self):
        components = [
            disnake.ui.TextInput(
                label="–ü–æ–∑—ã–≤–Ω–æ–π",
                placeholder="–í–ø–∏—Å–∞—Ç—å –ø–æ–∑—ã–≤–Ω–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç—É, —Ç–æ –Ω–æ–º–µ—Ä",
                custom_id="callsign",
                style=disnake.TextInputStyle.short,
                max_length=50,
                required=True
            ),
            disnake.ui.TextInput(
                label="–ù–æ–º–µ—Ä",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1543 –∏–ª–∏ 02-1234",
                custom_id="number",
                style=disnake.TextInputStyle.short,
                max_length=10,
                required=True
            ),
            disnake.ui.TextInput(
                label="–ó–≤–∞–Ω–∏–µ",
                placeholder="–ü–∏—à–∏—Ç–µ CT",
                custom_id="rank",
                style=disnake.TextInputStyle.short,
                max_length=10,
                required=True
            ),
            disnake.ui.TextInput(
                label="–í—Ä–µ–º—è",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–°–ö+2 –∏–ª–∏ –ú–°–ö-1 –∏–ª–∏ –ú–°–ö",
                custom_id="time",
                style=disnake.TextInputStyle.short,
                max_length=10,
                required=True
            ),
            disnake.ui.TextInput(
                label="–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è",
                placeholder="–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì",
                custom_id="join_date",
                style=disnake.TextInputStyle.short,
                max_length=10,
                required=True
            )
        ]
        super().__init__(
            title="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ–π—Ü–∞",
            components=components,
            custom_id="new_soldier_modal"
        )

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class EditDataModal(disnake.ui.Modal):
    def __init__(self, field_name: str):
        self.field_name = field_name
        components = [
            disnake.ui.TextInput(
                label="–ü–æ–∑—ã–≤–Ω–æ–π",
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø–æ–∑—ã–≤–Ω–æ–π",
                custom_id="current_callsign",
                style=disnake.TextInputStyle.short,
                max_length=50,
                required=True
            ),
            disnake.ui.TextInput(
                label=f"–¢–µ–∫—É—â–µ–µ {field_name}",
                placeholder=f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ {field_name.lower()}",
                custom_id="current_value",
                style=disnake.TextInputStyle.short,
                max_length=50,
                required=True
            ),
            disnake.ui.TextInput(
                label=f"–ù–æ–≤–æ–µ {field_name}",
                placeholder=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_name.lower()}",
                custom_id="new_value",
                style=disnake.TextInputStyle.short,
                max_length=50,
                required=True
            )
        ]
        super().__init__(
            title=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ {field_name}",
            components=components,
            custom_id=f"edit_{field_name.lower()}_modal"
        )

class TableButtons(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.creds = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES)
        self.service = build('sheets', 'v4', credentials=self.creds)

    @commands.slash_command(
        name="setup_table_buttons",
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π"
    )
    @commands.has_permissions(administrator=True)
    async def setup_table_buttons(self, interaction: disnake.ApplicationCommandInteraction):
        # –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–Ω–æ–ø–æ–∫
        async for message in interaction.channel.history(limit=100):
            if not message.components:
                await message.delete()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∏
        has_buttons = False
        async for message in interaction.channel.history(limit=1):
            if message.components:
                has_buttons = True
                break

        if not has_buttons:
            view = disnake.ui.View(timeout=None)
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π –±–æ–µ—Ü"
            new_soldier_button = disnake.ui.Button(
                style=disnake.ButtonStyle.success,
                label="‚ûï –ù–æ–≤—ã–π –±–æ–µ—Ü",
                custom_id="new_soldier"
            )
            view.add_item(new_soldier_button)
            
            # –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            edit_data_button = disnake.ui.Button(
                style=disnake.ButtonStyle.primary,
                label="üìù –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                custom_id="edit_data"
            )
            view.add_item(edit_data_button)

            embed = disnake.Embed(
                title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü–µ–π",
                description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –ª–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞",
                color=disnake.Color.blue()
            )
            await interaction.channel.send(embed=embed, view=view)

        await interaction.response.send_message(
            "–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!",
            ephemeral=True
        )

    def validate_timezone(self, time_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        time_str = time_str.upper()
        
        if time_str == "–ú–°–ö":
            return True
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –ú–°–ö –∏ –∑–Ω–∞–∫–æ–º +/-
        time_str = time_str.replace("–ú–°–ö ", "–ú–°–ö")
        
        if time_str.startswith("–ú–°–ö+") or time_str.startswith("–ú–°–ö-"):
            try:
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ +/- –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
                offset = int(time_str[4:].strip())
                return -12 <= offset <= 12  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ—â–µ–Ω–∏–µ –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            except ValueError:
                return False
        
        return False

    async def add_new_soldier(self, interaction: disnake.ModalInteraction):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
            callsign = interaction.text_values["callsign"]
            number = interaction.text_values["number"]
            rank = interaction.text_values["rank"]
            time = interaction.text_values["time"].upper()
            join_date = interaction.text_values["join_date"]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            try:
                datetime.strptime(join_date, '%d.%m.%Y')
            except ValueError:
                await interaction.edit_original_response(
                    content="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
            if not self.validate_timezone(time):
                await interaction.edit_original_response(
                    content="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ú–°–ö, –ú–°–ö +1, –ú–°–ö+ 1, –ú–°–ö +2, –ú–°–ö-1 –∏ —Ç.–ø."
                )
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            values = [[
                callsign,
                number,
                rank,
                'Regular',  # –ö–æ–ª–æ–Ω–∫–∞ D
                'R',        # –ö–æ–ª–æ–Ω–∫–∞ E
                time,
                join_date,
                '–ê–∫—Ç–∏–≤–µ–Ω'   # –ö–æ–ª–æ–Ω–∫–∞ H
            ]]

            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            result = self.service.spreadsheets().values().get(
                spreadsheetId=SPREADSHEET_ID,
                range='–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!A2:A'
            ).execute()
            next_row = len(result.get('values', [])) + 2

            self.service.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!A{next_row}:H{next_row}',
                valueInputOption='RAW',
                body={'values': values}
            ).execute()

            # –°—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ"
            self.service.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!I{next_row}',
                valueInputOption='RAW',
                body={'values': [["–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ"]]}
            ).execute()

            # –°–æ–∑–¥–∞–µ–º embed —Å –¥–∞–Ω–Ω—ã–º–∏
            embed = disnake.Embed(
                title="–ù–æ–≤—ã–π –±–æ–µ—Ü",
                color=disnake.Color.green()
            )
            embed.add_field(name="–ü–æ–∑—ã–≤–Ω–æ–π", value=callsign, inline=False)
            embed.add_field(name="–ù–æ–º–µ—Ä", value=number, inline=False)
            embed.add_field(name="–ó–≤–∞–Ω–∏–µ", value=rank, inline=False)
            embed.add_field(name="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", value="Regular", inline=False)
            embed.add_field(name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", value="R", inline=False)
            embed.add_field(name="–í—Ä–µ–º—è", value=time, inline=False)
            embed.add_field(name="–î–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è", value=join_date, inline=False)
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value="–ê–∫—Ç–∏–≤–µ–Ω", inline=False)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
            await interaction.edit_original_response(
                content=f"<@&1334403880800358460>",
                embed=embed
            )
            message = await interaction.original_message()
            await message.add_reaction('‚úÖ')
            await message.add_reaction('‚ùå')

            # –ñ–¥–µ–º —Ä–µ–∞–∫—Ü–∏—é –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            def check(reaction, user):
                return (
                    reaction.message.id == message.id and
                    str(reaction.emoji) in ['‚úÖ', '‚ùå'] and
                    any(role.id == 1334403880800358460 for role in user.roles)
                )

            try:
                reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check=check)
                status = "–û–¥–æ–±—Ä–µ–Ω–æ" if str(reaction.emoji) == '‚úÖ' else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
                self.service.spreadsheets().values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!I{next_row}',
                    valueInputOption='RAW',
                    body={'values': [[status]]}
                ).execute()

                # –û–±–Ω–æ–≤–ª—è–µ–º embed
                embed.add_field(
                    name="–°—Ç–∞—Ç—É—Å",
                    value=f"{status} - {user.display_name}",
                    inline=False
                )
                await message.edit(embed=embed)

            except asyncio.TimeoutError:
                # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª
                self.service.spreadsheets().values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!I{next_row}',
                    valueInputOption='RAW',
                    body={'values': [["–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ"]]}
                ).execute()

        except Exception as e:
            await interaction.edit_original_response(
                content=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    async def edit_field_in_table(self, interaction: disnake.ModalInteraction, field_name: str):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
            callsign = interaction.text_values["current_callsign"]
            current_value = interaction.text_values["current_value"]
            new_value = interaction.text_values["new_value"]

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            result = self.service.spreadsheets().values().get(
                spreadsheetId=SPREADSHEET_ID,
                range='–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!A:I'
            ).execute()
            values = result.get('values', [])

            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –ø–æ–∑—ã–≤–Ω—ã–º
            row_index = None
            for i, row in enumerate(values):
                if row and row[0] == callsign:
                    row_index = i + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                    break

            if row_index is None:
                await interaction.edit_original_response(
                    content="–ü–æ–∑—ã–≤–Ω–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ!"
                )
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            column_mapping = {
                "–ó–≤–∞–Ω–∏–µ": "C",
                "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": "E",
                "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ": "D",
                "–í—Ä–µ–º—è": "F",
                "–ù–æ–º–µ—Ä": "B",
                "–ü–æ–∑—ã–≤–Ω–æ–π": "A"
            }

            column = column_mapping.get(field_name)
            if not column:
                await interaction.edit_original_response(
                    content="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è!"
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
            self.service.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!{column}{row_index}',
                valueInputOption='RAW',
                body={'values': [[new_value]]}
            ).execute()

            # –°—Ä–∞–∑—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ"
            self.service.spreadsheets().values().update(
                spreadsheetId=SPREADSHEET_ID,
                range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!J{row_index}',
                valueInputOption='RAW',
                body={'values': [["–û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ"]]}
            ).execute()

            # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            embed = disnake.Embed(
                title="–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
                color=disnake.Color.yellow()
            )
            embed.add_field(name="–ü–æ–∑—ã–≤–Ω–æ–π", value=callsign, inline=False)
            embed.add_field(name="–ü–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è", value=field_name, inline=False)
            embed.add_field(name="–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", value=current_value, inline=False)
            embed.add_field(name="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", value=new_value, inline=False)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
            await interaction.edit_original_response(
                content=f"<@&1334403880800358460>",
                embed=embed
            )
            message = await interaction.original_message()
            await message.add_reaction('‚úÖ')
            await message.add_reaction('‚ùå')

            # –ñ–¥–µ–º —Ä–µ–∞–∫—Ü–∏—é –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            def check(reaction, user):
                return (
                    reaction.message.id == message.id and
                    str(reaction.emoji) in ['‚úÖ', '‚ùå'] and
                    any(role.id == 1334403880800358460 for role in user.roles)
                )

            try:
                reaction, user = await self.bot.wait_for('reaction_add', timeout=30.0, check=check)
                status = "–û–¥–æ–±—Ä–µ–Ω–æ" if str(reaction.emoji) == '‚úÖ' else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
                self.service.spreadsheets().values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!J{row_index}',
                    valueInputOption='RAW',
                    body={'values': [[status]]}
                ).execute()

                # –û–±–Ω–æ–≤–ª—è–µ–º embed
                embed.add_field(
                    name="–°—Ç–∞—Ç—É—Å",
                    value=f"{status} - {user.display_name}",
                    inline=False
                )
                await message.edit(embed=embed)

                if str(reaction.emoji) == '‚ùå':
                    # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    self.service.spreadsheets().values().update(
                        spreadsheetId=SPREADSHEET_ID,
                        range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!{column}{row_index}',
                        valueInputOption='RAW',
                        body={'values': [[current_value]]}
                    ).execute()

            except asyncio.TimeoutError:
                embed.add_field(
                    name="–°—Ç–∞—Ç—É—Å",
                    value="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
                    inline=False
                )
                await message.edit(embed=embed)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self.service.spreadsheets().values().update(
                    spreadsheetId=SPREADSHEET_ID,
                    range=f'–ê–ö–¢–£–ê–õ–¨–ù–´–ï–¢–ï–°–¢!{column}{row_index}',
                    valueInputOption='RAW',
                    body={'values': [[current_value]]}
                ).execute()

        except Exception as e:
            await interaction.edit_original_response(
                content=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @commands.Cog.listener()
    async def on_button_click(self, interaction: disnake.MessageInteraction):
        if interaction.component.custom_id == "new_soldier":
            await interaction.response.send_modal(NewSoldierModal())
            
        elif interaction.component.custom_id == "edit_data":
            # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
            select = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å",
                options=[
                    disnake.SelectOption(label="–ó–≤–∞–Ω–∏–µ", value="–ó–≤–∞–Ω–∏–µ"),
                    disnake.SelectOption(label="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", value="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"),
                    disnake.SelectOption(label="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", value="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ"),
                    disnake.SelectOption(label="–í—Ä–µ–º—è", value="–í—Ä–µ–º—è"),
                    disnake.SelectOption(label="–ù–æ–º–µ—Ä", value="–ù–æ–º–µ—Ä"),
                    disnake.SelectOption(label="–ü–æ–∑—ã–≤–Ω–æ–π", value="–ü–æ–∑—ã–≤–Ω–æ–π")
                ]
            )

            async def select_callback(select_interaction: disnake.MessageInteraction):
                field_name = select_interaction.values[0]
                await select_interaction.response.send_modal(EditDataModal(field_name))

            select.callback = select_callback
            view = disnake.ui.View(timeout=60)
            view.add_item(select)
            
            await interaction.response.send_message(
                "–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?",
                view=view,
                ephemeral=True
            )

    @commands.Cog.listener()
    async def on_modal_submit(self, interaction: disnake.ModalInteraction):
        if interaction.custom_id == "new_soldier_modal":
            await interaction.response.defer(ephemeral=False)
            await self.add_new_soldier(interaction)
        elif interaction.custom_id.startswith("edit_"):
            await interaction.response.defer(ephemeral=False)
            field_name = interaction.custom_id.replace("edit_", "").replace("_modal", "").title()
            await self.edit_field_in_table(interaction, field_name)

def setup(bot):
    bot.add_cog(TableButtons(bot)) 