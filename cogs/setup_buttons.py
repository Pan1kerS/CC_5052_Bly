import disnake
from disnake.ext import commands
from config import CHANNELS, REPORTS, CHANNEL_TO_REPORT

class SetupButtons(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(
        name="setup_buttons",
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"
    )
    @commands.has_permissions(administrator=True)
    async def setup_buttons(self, interaction: disnake.ApplicationCommandInteraction):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        for channel_id in CHANNEL_TO_REPORT.keys():
            channel = interaction.guild.get_channel(channel_id)
            if channel:
                report_type = CHANNEL_TO_REPORT[channel_id]
                config = REPORTS[report_type]
                
                view = disnake.ui.View(timeout=None)
                button = disnake.ui.Button(
                    style=disnake.ButtonStyle.primary,
                    label=config['label'],
                    custom_id=config['custom_id']
                )
                view.add_item(button)

                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –∫ –∫–Ω–æ–ø–∫–µ
                if config['custom_id'] == "report_combat_button":
                    button.callback = self.bot.get_cog('ReportOperation').start_report
                elif config['custom_id'] == "report_training_button":
                    button.callback = self.bot.get_cog('ReportTraining').start_report
                elif config['custom_id'] == "report_holiday_button":
                    button.callback = self.bot.get_cog('ReportHoliday').start_report
                elif config['custom_id'] == "report_rank_button":
                    button.callback = self.bot.get_cog('ReportRank').start_report
                elif config['custom_id'] == "report_attestation_button":
                    button.callback = self.bot.get_cog('ReportAttestation').start_report
                elif config['custom_id'] == "report_recommendation_button":
                    button.callback = self.bot.get_cog('ReportRecommendation').start_report
                elif config['custom_id'] == "report_reprimand_button":
                    button.callback = self.bot.get_cog('ReportReprimand').start_report

                embed = disnake.Embed(
                    title=config['title'],
                    description=config['description'],
                    color=disnake.Color.blue()
                )
                await channel.send(embed=embed, view=view)

        await interaction.response.send_message("–ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!", ephemeral=True)

    @commands.Cog.listener()
    async def on_button_click(self, interaction: disnake.MessageInteraction):
        custom_id = interaction.component.custom_id
        for config in REPORTS.values():
            if config['custom_id'] == custom_id:
                command = self.bot.get_slash_command(config['command'])
                if command:
                    await command(interaction)
                break

    @commands.slash_command(
        name="setup_personal_file",
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É –ª–∏—á–Ω–æ–≥–æ –¥–µ–ª–∞"
    )
    @commands.has_permissions(administrator=True)
    async def setup_personal_file(self, interaction: disnake.ApplicationCommandInteraction):
        channel = interaction.guild.get_channel(1339829150113992745)
        if not channel:
            await interaction.response.send_message(
                "–ö–∞–Ω–∞–ª –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                ephemeral=True
            )
            return

        # –û—á–∏—â–∞–µ–º –∫–∞–Ω–∞–ª –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞)
        async for message in channel.history(limit=100):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏)
            if not message.components:
                await message.delete()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ
        has_button = False
        async for message in channel.history(limit=1):
            if message.components:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É
                has_button = True
                break

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
        if not has_button:
            view = disnake.ui.View(timeout=None)
            personal_file_button = disnake.ui.Button(
                style=disnake.ButtonStyle.secondary,
                label="üìã –õ–∏—á–Ω–æ–µ –¥–µ–ª–æ",
                custom_id="personal_file"
            )
            view.add_item(personal_file_button)

            embed = disnake.Embed(
                title="–õ–∏—á–Ω–æ–µ –¥–µ–ª–æ",
                description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ –ª–∏—á–Ω–æ–µ –¥–µ–ª–æ",
                color=disnake.Color.blue()
            )
            await channel.send(embed=embed, view=view)

        await interaction.response.send_message(
            "–ö–∞–Ω–∞–ª –ª–∏—á–Ω–æ–≥–æ –¥–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!",
            ephemeral=True
        )

def setup(bot):
    bot.add_cog(SetupButtons(bot)) 